/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PublicImport } from './routes/_public'
import { Route as AuthImport } from './routes/_auth'
import { Route as AuthIndexImport } from './routes/_auth/index'
import { Route as PublicResetpasswordImport } from './routes/_public/resetpassword'
import { Route as PublicRegisterImport } from './routes/_public/register'
import { Route as PublicLoginImport } from './routes/_public/login'
import { Route as PublicChangepasswordImport } from './routes/_public/changepassword'

// Create/Update Routes

const PublicRoute = PublicImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRoute,
} as any)

const PublicResetpasswordRoute = PublicResetpasswordImport.update({
  id: '/resetpassword',
  path: '/resetpassword',
  getParentRoute: () => PublicRoute,
} as any)

const PublicRegisterRoute = PublicRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => PublicRoute,
} as any)

const PublicLoginRoute = PublicLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicRoute,
} as any)

const PublicChangepasswordRoute = PublicChangepasswordImport.update({
  id: '/changepassword',
  path: '/changepassword',
  getParentRoute: () => PublicRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/_public/changepassword': {
      id: '/_public/changepassword'
      path: '/changepassword'
      fullPath: '/changepassword'
      preLoaderRoute: typeof PublicChangepasswordImport
      parentRoute: typeof PublicImport
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginImport
      parentRoute: typeof PublicImport
    }
    '/_public/register': {
      id: '/_public/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof PublicRegisterImport
      parentRoute: typeof PublicImport
    }
    '/_public/resetpassword': {
      id: '/_public/resetpassword'
      path: '/resetpassword'
      fullPath: '/resetpassword'
      preLoaderRoute: typeof PublicResetpasswordImport
      parentRoute: typeof PublicImport
    }
    '/_auth/': {
      id: '/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof AuthImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthIndexRoute: typeof AuthIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthIndexRoute: AuthIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface PublicRouteChildren {
  PublicChangepasswordRoute: typeof PublicChangepasswordRoute
  PublicLoginRoute: typeof PublicLoginRoute
  PublicRegisterRoute: typeof PublicRegisterRoute
  PublicResetpasswordRoute: typeof PublicResetpasswordRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicChangepasswordRoute: PublicChangepasswordRoute,
  PublicLoginRoute: PublicLoginRoute,
  PublicRegisterRoute: PublicRegisterRoute,
  PublicResetpasswordRoute: PublicResetpasswordRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof PublicRouteWithChildren
  '/changepassword': typeof PublicChangepasswordRoute
  '/login': typeof PublicLoginRoute
  '/register': typeof PublicRegisterRoute
  '/resetpassword': typeof PublicResetpasswordRoute
  '/': typeof AuthIndexRoute
}

export interface FileRoutesByTo {
  '': typeof PublicRouteWithChildren
  '/changepassword': typeof PublicChangepasswordRoute
  '/login': typeof PublicLoginRoute
  '/register': typeof PublicRegisterRoute
  '/resetpassword': typeof PublicResetpasswordRoute
  '/': typeof AuthIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_public/changepassword': typeof PublicChangepasswordRoute
  '/_public/login': typeof PublicLoginRoute
  '/_public/register': typeof PublicRegisterRoute
  '/_public/resetpassword': typeof PublicResetpasswordRoute
  '/_auth/': typeof AuthIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/changepassword'
    | '/login'
    | '/register'
    | '/resetpassword'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/changepassword' | '/login' | '/register' | '/resetpassword' | '/'
  id:
    | '__root__'
    | '/_auth'
    | '/_public'
    | '/_public/changepassword'
    | '/_public/login'
    | '/_public/register'
    | '/_public/resetpassword'
    | '/_auth/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/_public"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/"
      ]
    },
    "/_public": {
      "filePath": "_public.tsx",
      "children": [
        "/_public/changepassword",
        "/_public/login",
        "/_public/register",
        "/_public/resetpassword"
      ]
    },
    "/_public/changepassword": {
      "filePath": "_public/changepassword.tsx",
      "parent": "/_public"
    },
    "/_public/login": {
      "filePath": "_public/login.tsx",
      "parent": "/_public"
    },
    "/_public/register": {
      "filePath": "_public/register.tsx",
      "parent": "/_public"
    },
    "/_public/resetpassword": {
      "filePath": "_public/resetpassword.tsx",
      "parent": "/_public"
    },
    "/_auth/": {
      "filePath": "_auth/index.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
